[
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "1 Challenge 1\n\n# 1.0 Libraries ----\n# Tidyverse\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(vroom)\n\n# Data Table\nlibrary(data.table)\n\n#> \n#> Attaching package: 'data.table'\n#> \n#> The following objects are masked from 'package:lubridate':\n#> \n#>     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#>     yday, year\n#> \n#> The following objects are masked from 'package:dplyr':\n#> \n#>     between, first, last\n#> \n#> The following object is masked from 'package:purrr':\n#> \n#>     transpose\n\n# Counter\nlibrary(tictoc)\n\n#> \n#> Attaching package: 'tictoc'\n#> \n#> The following object is masked from 'package:data.table':\n#> \n#>     shift\n\n# 2.0 DATA IMPORT ----\n\n# 2.1 asignee ----\ncol_types_assignee <- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/assignee.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n# 2.2 patent assignee ----\ncol_types_patent_assignee <- list(\n  patent_id   = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/patent_assignee.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_patent_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\npatent_assignee_tbl <- patent_assignee_tbl %>% rename(id = assignee_id)\n\n# 3.1 assignee ----\nclass(assignee_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(assignee_tbl)\n\nclass(assignee_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\nassignee_tbl %>% glimpse()\n\n#> Rows: 47,011\n#> Columns: 3\n#> $ id           <chr> \"org_004j997jM9yEdS7z4ReD\", \"org_005hVGA5JMOZsS0xOhGa\", \"…\n#> $ type         <chr> \"3\", \"3\", \"2\", \"2\", \"3\", \"3\", \"2\", \"3\", \"2\", \"3\", \"2\", \"2…\n#> $ organization <chr> \"University of Basel\", \"Zetkama Spólka Akcyjna\", \"Mirabil…\n\n# 3.2 patent assignee ----\nclass(patent_assignee_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(patent_assignee_tbl)\n\nclass(patent_assignee_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\npatent_assignee_tbl %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 2\n#> $ patent_id <chr> \"8709412\", \"8636251\", \"8899346\", \"8700141\", \"8724986\", \"D699…\n#> $ id        <chr> \"org_MPhnVOTFsXybN0auC647\", \"org_v7VisXnmZZEEUMeHhW6y\", \"org…\n\n# 4.0 Data Wrangling ----\n\n# 4.1 Joining / Merging Data ----\ntic()\ncombined_data <- merge(x = assignee_tbl, y = patent_assignee_tbl, \n                       by    = \"id\", \n                       all.x = TRUE, \n                       all.y = FALSE)\ntoc()\n\n#> 0.32 sec elapsed\n\ncombined_data %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 4\n#> $ id           <chr> \"org_004j997jM9yEdS7z4ReD\", \"org_004j997jM9yEdS7z4ReD\", \"…\n#> $ type         <chr> \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"2\", \"2\", \"2\", \"2…\n#> $ organization <chr> \"University of Basel\", \"University of Basel\", \"Zetkama Sp…\n#> $ patent_id    <chr> \"8728438\", \"8921361\", \"8857791\", \"8845559\", \"8815936\", \"8…\n\n# Same operation with dplyr\ntic()\npatent_assignee_tbl %>%\n  left_join(assignee_tbl, by = \"id\")\n\n\n\n  \n\n\ntoc()\n\n#> 1.33 sec elapsed\n\n# 4.2. Preparing the Data Table\n\nsetkey(combined_data, \"id\")\nkey(combined_data)\n\n#> [1] \"id\"\n\nsetorderv(combined_data, c(\"id\", \"patent_id\"))\n\n# 4.3 Select Columns ----\ncombined_data %>% dim()\n\n#> [1] 315910      4\n\nkeep_cols <- c(\"organization\",\n               \"type\",\n               \"patent_id\")\n\ncombined_data <- combined_data[, ..keep_cols]\n\ncombined_data %>% dim()\n\n#> [1] 315910      3\n\nresult_1_tbl <- combined_data[type == 2, .(count = .N), by = organization][order(-count)][1:10]\n\nresult_1_tbl\n\n\n\n  \n\n\n\n\n2 Challenge 2\n\n# 1.0 Libraries ----\n# Tidyverse\nlibrary(tidyverse)\nlibrary(vroom)\nlibrary(lubridate)\n# Data Table\nlibrary(data.table)\n\n# Counter\nlibrary(tictoc)\n\n# 2.0 DATA IMPORT ----\n\n# 2.1 asignee ----\ncol_types_assignee <- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/assignee.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n# 2.2 patent assignee ----\ncol_types_patent_assignee <- list(\n  patent_id   = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/patent_assignee.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_patent_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\npatent_assignee_tbl <- patent_assignee_tbl %>% rename(id = assignee_id)\n\n# 2.3 patent ----\ncol_types_patent <- list(\n  id   = col_character(),\n  date = col_date(\"%Y-%m-%d\"),\n  num_claims = col_integer()\n)\n\npatent_tbl <- vroom(\n  file       = \"Patent_data_reduced/patent.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_patent,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\npatent_tbl <- patent_tbl %>% rename(patent_id = id)\n\n# 3.1 assignee ----\nclass(assignee_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(assignee_tbl)\n\nclass(assignee_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\nassignee_tbl %>% glimpse()\n\n#> Rows: 47,011\n#> Columns: 3\n#> $ id           <chr> \"org_004j997jM9yEdS7z4ReD\", \"org_005hVGA5JMOZsS0xOhGa\", \"…\n#> $ type         <chr> \"3\", \"3\", \"2\", \"2\", \"3\", \"3\", \"2\", \"3\", \"2\", \"3\", \"2\", \"2…\n#> $ organization <chr> \"University of Basel\", \"Zetkama Spólka Akcyjna\", \"Mirabil…\n\n# 3.2 patent assignee ----\nclass(patent_assignee_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(patent_assignee_tbl)\n\nclass(patent_assignee_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\npatent_assignee_tbl %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 2\n#> $ patent_id <chr> \"8709412\", \"8636251\", \"8899346\", \"8700141\", \"8724986\", \"D699…\n#> $ id        <chr> \"org_MPhnVOTFsXybN0auC647\", \"org_v7VisXnmZZEEUMeHhW6y\", \"org…\n\n# 3.3 patent ----\nclass(patent_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(patent_tbl)\n\nclass(patent_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\npatent_tbl %>% glimpse()\n\n#> Rows: 327,014\n#> Columns: 3\n#> $ patent_id  <chr> \"8621662\", \"8621663\", \"8621664\", \"8621665\", \"8621666\", \"862…\n#> $ date       <date> 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-07…\n#> $ num_claims <int> 11, 6, 10, 18, 7, 9, 21, 19, 8, 18, 7, 15, 15, 15, 18, 7, 1…\n\n# 4.0 Data Wrangling ----\n\n# 4.1 Joining / Merging Data ----\ntic()\ncombined_data_1 <- merge(x = assignee_tbl, y = patent_assignee_tbl, \n                       by    = \"id\", \n                       all.x = TRUE, \n                       all.y = FALSE)\ntoc()\n\n#> 0.14 sec elapsed\n\ncombined_data_1 %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 4\n#> $ id           <chr> \"org_004j997jM9yEdS7z4ReD\", \"org_004j997jM9yEdS7z4ReD\", \"…\n#> $ type         <chr> \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"2\", \"2\", \"2\", \"2…\n#> $ organization <chr> \"University of Basel\", \"University of Basel\", \"Zetkama Sp…\n#> $ patent_id    <chr> \"8728438\", \"8921361\", \"8857791\", \"8845559\", \"8815936\", \"8…\n\n# Same operation with dplyr\ntic()\npatent_assignee_tbl %>%\n  left_join(assignee_tbl, by = \"id\")\n\n\n\n  \n\n\ntoc()\n\n#> 1.18 sec elapsed\n\n# combining next data\ntic()\ncombined_data_2 <- merge(x = combined_data_1, y = patent_tbl, \n                       by    = \"patent_id\", \n                       all.x = TRUE, \n                       all.y = FALSE)\ntoc()\n\n#> 1.04 sec elapsed\n\ncombined_data_2 %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 6\n#> $ patent_id    <chr> \"8621662\", \"8621663\", \"8621666\", \"8621668\", \"8621669\", \"8…\n#> $ id           <chr> \"org_aTMUEAbUvQuADfnSfudQ\", \"org_FfZ2sonhh4RvKY8vYp2B\", \"…\n#> $ type         <chr> \"2\", \"2\", \"2\", \"2\", \"2\", \"3\", \"2\", \"3\", \"3\", \"2\", \"3\", \"3…\n#> $ organization <chr> \"Hamilton Sundstrand Space Systems International, Inc.\", …\n#> $ date         <date> 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-…\n#> $ num_claims   <int> 11, 6, 7, 21, 19, 8, 15, 18, 7, 22, 30, 18, 21, 20, 22, 1…\n\n# Same operation with dplyr\ntic()\npatent_tbl %>%\n  left_join(combined_data_1, by = \"patent_id\")\n\n\n\n  \n\n\ntoc()\n\n#> 1.61 sec elapsed\n\n# Select columns\ncombined_data_2 %>% dim()\n\n#> [1] 315910      6\n\nkeep_cols <- c(\"organization\",\n               \"patent_id\",\n               \"type\",\n               \"date\")\n\ncombined_data_2 <- combined_data_2[, ..keep_cols]\n\ncombined_data_2 %>% dim()\n\n#> [1] 315910      4\n\ncombined_data_2 %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 4\n#> $ organization <chr> \"Hamilton Sundstrand Space Systems International, Inc.\", …\n#> $ patent_id    <chr> \"8621662\", \"8621663\", \"8621666\", \"8621668\", \"8621669\", \"8…\n#> $ type         <chr> \"2\", \"2\", \"2\", \"2\", \"2\", \"3\", \"2\", \"3\", \"3\", \"2\", \"3\", \"3…\n#> $ date         <date> 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-07, 2014-01-…\n\ncombined_data_2 <- combined_data_2 %>% filter(between(date, as.Date('2014-08-01'), as.Date('2014-09-01')))\n\nresult_2_tbl <- combined_data_2[type == 2, .(count = .N), by = organization][order(-count)][1:10]\n\nresult_2_tbl\n\n\n\n  \n\n\n\n#Challenge 3\n\n# 1.0 Libraries ----\n# Tidyverse\nlibrary(tidyverse)\nlibrary(vroom)\n# Data Table\nlibrary(data.table)\n\n# Counter\nlibrary(tictoc)\n\n# 2.0 DATA IMPORT ----\n\n# 2.1 asignee ----\ncol_types_assignee <- list(\n  id = col_character(),\n  type = col_character(),\n  organization = col_character()\n)\n\nassignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/assignee.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n# 2.2 patent assignee ----\ncol_types_patent_assignee <- list(\n  patent_id   = col_character(),\n  assignee_id = col_character()\n)\n\npatent_assignee_tbl <- vroom(\n  file       = \"Patent_data_reduced/patent_assignee.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_patent_assignee,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\npatent_assignee_tbl <- patent_assignee_tbl %>% rename(id = assignee_id)\n\n# 2.3 USPC\ncol_types_uspc <- list(\n  patent_id = col_character(),\n  mainclass_id = col_integer()\n)\n\nuspc_tbl <- vroom(\n  file       = \"Patent_data_reduced/uspc.tsv\",\n  delim      = \"\\t\",\n  col_types = col_types_uspc,\n  na         = c(\"\", \"NA\", \"NULL\")\n)\n\n\n\n# 3.1 assignee ----\nclass(assignee_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(assignee_tbl)\n\nclass(assignee_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\n# 3.2 patent assignee ----\nclass(patent_assignee_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(patent_assignee_tbl)\n\nclass(patent_assignee_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\n# 3.3 uspc ----\nclass(uspc_tbl)\n\n#> [1] \"spec_tbl_df\" \"tbl_df\"      \"tbl\"         \"data.frame\"\n\nsetDT(uspc_tbl)\n\n#> Warning: One or more parsing issues, call `problems()` on your data frame for details,\n#> e.g.:\n#>   dat <- vroom(...)\n#>   problems(dat)\n\nclass(uspc_tbl)\n\n#> [1] \"data.table\" \"data.frame\"\n\n# 4.0 Data Wrangling ----\n\n# 4.1 Joining / Merging Data ----\nuspc_mean <- uspc_tbl[, lapply(.SD, mean), \n                      by = .(patent_id, mainclass_id), \n                      .SDcols = c(\"sequence\")]\n\ntic()\ncombined_data <- merge(x = assignee_tbl, y = patent_assignee_tbl, \n                       by    = \"id\", \n                       all.x = TRUE, \n                       all.y = FALSE)\ntoc()\n\n#> 0.14 sec elapsed\n\ncombined_data %>% glimpse()\n\n#> Rows: 315,910\n#> Columns: 4\n#> $ id           <chr> \"org_004j997jM9yEdS7z4ReD\", \"org_004j997jM9yEdS7z4ReD\", \"…\n#> $ type         <chr> \"3\", \"3\", \"3\", \"2\", \"3\", \"3\", \"3\", \"3\", \"2\", \"2\", \"2\", \"2…\n#> $ organization <chr> \"University of Basel\", \"University of Basel\", \"Zetkama Sp…\n#> $ patent_id    <chr> \"8728438\", \"8921361\", \"8857791\", \"8845559\", \"8815936\", \"8…\n\n# Same operation with dplyr\ntic()\npatent_assignee_tbl %>%\n  left_join(assignee_tbl, by = \"id\")\n\n\n\n  \n\n\ntoc()\n\n#> 0.97 sec elapsed\n\n# second combination\ncombined_data_3 <- merge(x = combined_data, y = uspc_mean, \n                        by = \"patent_id\", \n                        all.x = TRUE, \n                        all.y = FALSE)\n\n\n# 4.2. Preparing the Data Table\n\nsetkey(combined_data, \"id\")\nkey(combined_data)\n\n#> [1] \"id\"\n\nsetorderv(combined_data, c(\"id\", \"patent_id\"))\n\n# most innovative sector\nmost_sector <- combined_data_3[!is.na(mainclass_id), .(count = .N), by = mainclass_id][order(-count)][1]\n\nmost_sector\n\n\n\n  \n\n\n# Top 10 companies with most patents (worldwide)\n# remove NA value on mainclass_id\ncombined_data_3_clean <- combined_data_3[!is.na(mainclass_id)]\n\nmost_patents_worldwide <- combined_data_3_clean[, .(count = .N), by = organization][order(-count)][1:10]\n\nmost_patents_worldwide\n\n\n\n  \n\n\n# subset top 10 companies\nsubset_10_companies <- setDT(combined_data_3_clean, key='organization')[J(most_patents_worldwide)]\n\n# top 5 USPTO tech main classes\nsubset_10_companies[, .(count = .N), by = mainclass_id][order(-count)][1:5]"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "1 Challenge 1\n\n# Libraries ----\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(ggrepel)\n\n# Import data from CSV ----\n\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#> Rows: 311581 Columns: 67\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Data Wrangling ----\n\n# Select columns and filter categories\ncase_by_country_tbl <- covid_data_tbl %>%\n  \n  select(location, date, total_cases) %>%\n  filter(location %in% c(\"Germany\",\"United Kingdom\",\"France\",\"Spain\",\"United States\") & date < Sys.Date()-10) %>%\n  \n  # summarise\n  group_by(location, date) %>%\n  summarise(total_cases = sum(total_cases)) %>%\n  ungroup() %>%\n  \n  # remove NA\n  replace(is.na(.), 0) %>%\n  \n  # Set column name\n  rename('Continent / Country' = location,\n         'Cumulatives' = total_cases)\n\n#> `summarise()` has grouped output by 'location'. You can override using the\n#> `.groups` argument.\n\n# synchronize data\nn = Sys.Date()-10\n\n\n# Show labels only at the end\nend_labels <- case_by_country_tbl %>% \n  group_by('Continent / Country') %>% \n  top_n(1, date)\n\n# 4.0 DATA VISUALIZATION ----\n\n# Line Plot\ncase_by_country_tbl %>%\n  \n  ggplot(aes(x=date, y=`Cumulatives`, group = `Continent / Country`, color = `Continent / Country`)) +\n  geom_line(size = 1) +\n  scale_x_date(date_breaks=\"1 month\", date_labels = \"%B'%y\", limits = as.Date(c('2020-01-01','2023-06-01')) ) +\n  scale_y_continuous(labels = scales::number_format(scale = 1e-6, \n                                                    prefix = \"\",\n                                                    suffix = \" M\")) +\n  scale_color_brewer(palette=\"Accent\") +\n  \n  labs(\n    title    = \"COVID-19 Confirmed Cases Worldwide\",\n    subtitle = str_glue(\"As of {n}\"),\n    x = \"\",\n    y = \"Cumulative Cases\"\n  ) + \n  \n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"bottom\"\n  ) +\n  \n  geom_label_repel(aes(label = scales::number(Cumulatives)), \n                   data = end_labels,\n                   nudge_x = 1,\n                   box.padding = 0.5,\n                   show.legend = FALSE)\n\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n2 Challenge 2\n\n# Libraries ----\n\nlibrary(tidyverse)\nlibrary(maps)\n\n#> \n#> Attaching package: 'maps'\n\n\n#> The following object is masked from 'package:purrr':\n#> \n#>     map\n\nlibrary(scales)\n\n#> \n#> Attaching package: 'scales'\n\n\n#> The following object is masked from 'package:purrr':\n#> \n#>     discard\n\n\n#> The following object is masked from 'package:readr':\n#> \n#>     col_factor\n\n# Import world map ----\nworld <- map_data(\"world\")\n\n# Import COVID data ----\ncovid_data_tbl <- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\")\n\n#> Rows: 311581 Columns: 67\n\n\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr   (4): iso_code, continent, location, tests_units\n#> dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#> date  (1): date\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# Data Wrangling ----\n# rename locations\ncovid_data_tbl <- covid_data_tbl %>% \n  mutate(location = case_when(\n    \n    location == \"Antigua and Barbuda\" ~ \"Antigua\",\n    location == \"Cote d'Ivoire\" ~ \"Ivory Coast\",\n    location == \"Czechia\" ~ \"Czech Republic\",\n    location == \"Democratic Republic of Congo\" ~ \"Democratic Republic of the Congo\",\n    location == \"Timor\" ~ \"Timor-Leste\",\n    location == \"Trinidad and Tobago\" ~ \"Trinidad\",\n    location == \"United Kingdom\" ~ \"UK\",\n    location == \"United States\" ~ \"USA\",\n    TRUE ~ location\n    \n  ))\n\n# Select and Filter data\nmort_rate_tbl <- covid_data_tbl %>%\n  \n  select(location, date, total_deaths, population) %>%\n  \n  # Reemove NA\n  replace(is.na(.), 0) %>%\n  \n  # new column for mortality rate\n  group_by(location) %>%\n  mutate(mortality_rate = total_deaths / population) %>%\n  ungroup() %>%\n  \n  # select date\n  filter(date == \"2023-04-16\") %>%\n  \n  # Set column name\n  rename(region = location)\n\n  # Format as numeric value for mortality rate\n  mort_rate_tbl$mortality_rate <- as.numeric(mort_rate_tbl$mortality_rate)\n  \n  # Merge table\n  \n  mort_rate_map <- left_join(mort_rate_tbl,world, by = \"region\")\n  \n  # plot\n  \n  ggplot(mort_rate_map, aes(map_id = region, fill = mortality_rate))+\n    \n    geom_map(map = mort_rate_map,  color = \"black\")+\n    \n    expand_limits(x = mort_rate_map$long, y = mort_rate_map$lat) +\n    \n    scale_fill_gradient(low='red', high='grey10', labels = percent) +\n    \n    # Labels\n    labs(\n      title = \"Confirmed COVID-19 Deaths Relative to the size of the Population\",\n      caption = \"2023-04-16\",\n      x = \"\",\n      y = \"\",\n    ) +\n    \n    theme(\n      legend.position = \"right\"\n    )"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "1 Bikeshop Challenge\n\n# Data Science at TUHH ------------------------------------------------------\n# SALES ANALYSIS ----\n\n# 1.0 Load libraries ----\nlibrary(tidyverse)\nlibrary(readxl)\n\n# 2.0 Importing Files ----\nbikes_tbl      <- read_excel(path = \"Bikeshop Example/01_bike_sales/01_raw_data/bikes.xlsx\")\norderlines_tbl <- read_excel(\"Bikeshop Example/01_bike_sales/01_raw_data/orderlines.xlsx\")\n\n#> New names:\n#> • `` -> `...1`\n\nbikeshops_tbl  <- read_excel(\"Bikeshop Example/01_bike_sales/01_raw_data/bikeshops.xlsx\")\n\n# 3.0 Examining Data ----\norderlines_tbl\n\n\n\n  \n\n\nglimpse(orderlines_tbl)\n\n#> Rows: 15,644\n#> Columns: 7\n#> $ ...1        <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"…\n#> $ order.id    <dbl> 1, 1, 2, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7…\n#> $ order.line  <dbl> 1, 2, 1, 2, 1, 2, 3, 4, 5, 1, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2…\n#> $ order.date  <dttm> 2015-01-07, 2015-01-07, 2015-01-10, 2015-01-10, 2015-01-1…\n#> $ customer.id <dbl> 2, 2, 10, 10, 6, 6, 6, 6, 6, 22, 8, 8, 8, 8, 16, 16, 16, 1…\n#> $ product.id  <dbl> 2681, 2411, 2629, 2137, 2367, 1973, 2422, 2655, 2247, 2408…\n#> $ quantity    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1…\n\n# 4.0 Joining Data ----\n#left_join(orderlines_tbl, bikes_tbl)\nleft_join(orderlines_tbl, bikes_tbl, by = c(\"product.id\" = \"bike.id\"))\n\n\n\n  \n\n\nbike_orderlines_joined_tbl <- orderlines_tbl %>%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %>%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n# 5.0 Wrangling Data ----\nbike_orderlines_joined_tbl %>% \n  select(category) %>%\n  filter(str_detect(category, \"^Mountain\")) %>% \n  unique()\n\n\n\n  \n\n\nbike_orderlines_wrangled_tbl <- bike_orderlines_joined_tbl %>%\n  \n  # 5.1 Separate category name\n  separate(col    = location,\n           into   = c(\"city\", \"state\"),\n           sep    = \", \") %>%\n  \n  # 5.2 Add the total price (price * quantity) \n  # Add a column to a tibble that uses a formula-style calculation of other columns\n  mutate(total.price = price * quantity) %>%\n  \n  # 5.3 Optional: Reorganize. Using select to grab or remove unnecessary columns\n  # 5.3.1 by exact column name\n  select(-...1, -gender) %>%\n  \n  # 5.3.2 by a pattern\n  # You can use the select_helpers to define patterns. \n  # Type ?ends_with and click on Select helpers in the documentation\n  select(-ends_with(\".id\")) %>%\n  \n  # 5.3.3 Actually we need the column \"order.id\". Let's bind it back to the data\n  bind_cols(bike_orderlines_joined_tbl %>% select(order.id)) %>% \n  \n  # 5.3.4 You can reorder the data by selecting the columns in your desired order.\n  # You can use select_helpers like contains() or everything()\n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %>%\n  \n  # 5.4 Rename columns because we actually wanted underscores instead of the dots\n  # (one at the time vs. multiple at once)\n  rename(bikeshop = name) %>%\n  set_names(names(.) %>% str_replace_all(\"\\\\.\", \"_\"))\n\n# 6.0 Business Insights ----\n# 6.1 Sales by Year ----\nlibrary(lubridate)\n\n# Step 1 - Manipulate\nsales_by_state_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns\n  select(state, total_price) %>%\n  \n  # Add year column\n  #mutate(year = year(order_date)) %>%\n  \n  # Grouping by year and summarizing sales\n  group_by(state) %>% \n  summarize(sales = sum(total_price)) %>%\n  \n  # Optional: Add a column that turns the numbers into a currency format \n  # (makes it in the plot optically more appealing)\n  # mutate(sales_text = scales::dollar(sales)) <- Works for dollar values\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\nsales_by_state_tbl\n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_state_tbl %>%\n  \n  # Setup canvas with the columns year (x-axis) and sales (y-axis)\n  ggplot(aes(x = state, y = sales)) + \n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  \n  # Geometries\n  geom_col(fill = \"#2DC6D6\") + # Use geom_col for a bar plot\n  geom_label(aes(label = sales_text)) + # Adding labels to the bars\n  geom_smooth(method = \"lm\", se = FALSE) + # Adding a trendline, \"lm\" = linear models\n  \n  # Formatting\n  # scale_y_continuous(labels = scales::dollar) + # Change the y-axis. \n  # Again, we have to adjust it for euro values\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by State\",\n    #subtitle = \"Upward Trend\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n#> `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n# 6.2 Sales by Year and Category 2 ----\n\n# Step 1 - Manipulate\nsales_by_loc_year_tbl <- bike_orderlines_wrangled_tbl %>%\n  \n  # Select columns and add a year\n  select(order_date, total_price, state) %>%\n  mutate(year = year(order_date)) %>%\n  \n  # Group by and summarize year and main category\n  group_by(year, state) %>%\n  summarise(sales = sum(total_price)) %>%\n  ungroup() %>%\n  \n  # Format $ Text\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#> `summarise()` has grouped output by 'year'. You can override using the\n#> `.groups` argument.\n\nsales_by_loc_year_tbl  \n\n\n\n  \n\n\n# Step 2 - Visualize\nsales_by_loc_year_tbl %>%\n  \n  # Set up x, y, fill\n  ggplot(aes(x = year, y = sales, fill = state)) +\n  \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  \n  # Geometries\n  geom_col() + # Run up to here to get a stacked bar plot\n  \n  # Facet\n  facet_wrap(~ state) +\n  \n  # Formatting\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title = \"Revenue by location and year\",\n    #subtitle = \"Each product category has an upward trend\",\n    fill = \"States\" # Changes the legend name\n  )\n\n\n\n\n\n\n# 7.0 Writing Files ----\n\n# 7.1 Excel ----\n#install.packages(\"writexl\")\nlibrary(\"writexl\")\nbike_orderlines_wrangled_tbl %>%\n  write_xlsx(\"Bikeshop Example/02_bike_sales/bike_orderlines.xlsx\")\n\n# 7.2 CSV ----\nbike_orderlines_wrangled_tbl %>% \n  write_csv(\"Bikeshop Example/02_bike_sales/bike_orderlines.csv\")\n\n# 7.3 RDS ----\nbike_orderlines_wrangled_tbl %>% \n  write_rds(\"Bikeshop Example/02_bike_sales/bike_orderlines.rds\")"
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "1 Challenge 1\n\n#List of needs of foodbanks countrywide\n# Libraries ----\nlibrary(httr)\nlibrary(jsonlite)\n\n# Call API ----\nneeds <- httr::GET(\"https://www.givefood.org.uk/api/2/needs/\")\n\n#str(needs)\n\n#str(needs$content)\n\n# Convert to text ----\nneedscontent <- httr::content(needs, as = \"text\")\n\n#> No encoding supplied: defaulting to UTF-8.\n\n#str(needscontent)\n\n# Convert JSON string to a dataframe\nneedsJSON <- jsonlite::fromJSON(needscontent)\n\nneedsJSON\n\n\n\n  \n\n\n\n\n2 Challenge 2\n\nlibrary(dplyr)\nlibrary(rvest)\n\nlink = \"https://www.rosebikes.de/sale/fahrr%C3%A4der\"\npage = read_html(link)\n\nmodel = page %>% html_nodes(\".catalog-product-tile__title\") %>% html_text()\nprice = page %>% html_nodes(\".product-tile-price__current-value\") %>% html_text()\n\nmodel <- gsub('[\\t\\n]','',model)\nprice <- gsub('[\\t\\n]','',price)\n\nbikes = data.frame(model, price, stringsAsFactors = FALSE)\nbikes"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]